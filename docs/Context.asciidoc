// Github
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
:relfilesuffix:
endif::[]

// Local
ifndef::env-github[]
:relfilesuffix: .asciidoc
endif::[]

:imagesdir: images

// Start collapsable Help
.image:info.png[Info]
[%collapsible]
====
____
The context section sets the scene for the remainder of the document. The context section should answer questions like:

* What is this software project all about?
* Who is using it? (users, roles, actors, personas, etc)

Its meant for technical and non-technical people, inside and outside the immediate software development team.
____
====

The goal is to develop a general computational system that has the same cognitive abilities as humans. As shorthand we call these _human-level agents_. The approach we have taken for developing such human level agents is to study the _cognitive architecture_ underlying general intelligence. A cognitive architecture provides the fixed computational structures that form the building blocks for creating general intelligence systems. A cognitive architecture is not a single algorithm or method for solving a problem; rather, it is a task independent infrastructure that brings a agent's knowledge to understand a problem in order to produce behavior.

In addition to being a software system for agent development, it is also a theory of what computational structures are necessary to support human-level agents. On the one hand it is a long term research project in which we continually attempt to extend the human level capabilities we can achieve in a computer; on the other hand it is a specific architecture that you can use today for developing human-level agents.

We are using _problem spaces_ to organize behavior in solving a problem with the use of _production systems_ to represent the knowledge used to control behavior. In problem spaces, behavior is decomposed into a selection of _operators_ and their application to _states_ to make progress toward a goal. States are representations of the current situation; operators are the means by which a system can make deliberate changes in the situation. In production systems, long term knowledge is encoded as rules in procedural memory; short term knowledge is encoded as declarative symbolic structures in working memory. Different problem spaces are available for different tasks, and multiple problem spaces can be used for different aspects of a single task. This provides a significant increase in generality and flexibility and by casting all activity within problem spaces, we create a uniform approach for control of internal reasoning and external action. Production rules are used to represent the different functional aspects, proposal evaluation and application, of operators. Instead of trying to select the best rule, all matching rules fire in parallel, and the point of decision making is selecting the next _operator_. Knowledge abut which operator to select is encoded in the production rules. In making a decision, the rules relevant to the current situation control behavior so that the method emerges from a combination of the knowledge and the structure of the task. Thus, as knowledge is added, the behavior of the system changes.