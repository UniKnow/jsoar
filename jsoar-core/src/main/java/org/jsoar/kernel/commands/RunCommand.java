package org.jsoar.kernel.commands;

import org.jsoar.kernel.AgentRunController;
import org.jsoar.kernel.RunType;
import org.jsoar.util.commands.PicocliSoarCommand;
import picocli.CommandLine.Command;
import picocli.CommandLine.HelpCommand;
import picocli.CommandLine.Model.CommandSpec;
import picocli.CommandLine.Option;
import picocli.CommandLine.ParameterException;
import picocli.CommandLine.Parameters;
import picocli.CommandLine.Spec;

/**
 * This is the implementation of the "run" command.
 *
 * @author austin.brehob
 */
public class RunCommand extends PicocliSoarCommand {
  public RunCommand(AgentRunController controller) {
    super(new Run(controller));
  }

  @Command(
      name = "run",
      description = "Begin Soar's execution cycle",
      subcommands = {HelpCommand.class})
  public static class Run implements Runnable {
    private final AgentRunController controller;

    public Run(AgentRunController controller) {
      this.controller = controller;
    }

    @Spec CommandSpec spec;

    @Option(
        names = {"-d", "--decision"},
        defaultValue = "false",
        description = "Run Soar for <count> decision cycles")
    boolean runDecision;

    @Option(
        names = {"-e", "--elaboration"},
        defaultValue = "false",
        description = "Run Soar for <count> elaboration cycles")
    boolean runElaboration;

    @Option(
        names = {"-p", "--phase"},
        defaultValue = "false",
        description = "Run Soar for <count> phases")
    boolean runPhase;

    @Option(
        names = {"-f", "--forever"},
        defaultValue = "false",
        description = "Run forever")
    boolean runForever;

    @Option(
        names = {"-o", "--output"},
        defaultValue = "false",
        description = "Run Soar until " + "the <count>th time output is generated by the agent")
    boolean runOutput;

    @Parameters(
        arity = "0..1",
        description = "A single integer which " + "specifies the number of cycles to run Soar")
    Integer count;

    @Override
    public void run() {
      validateArgs();

      RunType type = null;

      if (runDecision) {
        type = RunType.DECISIONS;
      } else if (runElaboration) {
        type = RunType.ELABORATIONS;
      } else if (runPhase) {
        type = RunType.PHASES;
      } else if (runForever) {
        type = RunType.FOREVER;
      } else if (runOutput) {
        type = RunType.MODIFICATIONS_OF_OUTPUT;
      } else {
        type = RunType.FOREVER;
      }

      if (count == null) {
        count = 1;
      }

      controller.runFor(count, type);
    }

    void validateArgs() {
      // check that if a runtype is provided, only one is provided
      if (runDecision || runElaboration || runPhase || runForever || runOutput) {
        if (!(runDecision ^ runElaboration ^ runPhase ^ runForever ^ runOutput)) {
          throw new ParameterException(spec.commandLine(), "Multiple run types specified");
        }
      }

      // if specified, count must be positive
      if (count != null && count <= 0) {
        throw new ParameterException(
            spec.commandLine(), "Expected count larger than 0 for run command, got " + count);
      }
    }
  }
}
