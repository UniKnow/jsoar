package org.jsoar.kernel.commands;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Arrays;
import java.util.Objects;
import org.jsoar.kernel.Agent;
import org.jsoar.kernel.SoarException;
import picocli.CommandLine;

public class Utils {

  /**
   * Helper method intended to connect SoarCommands to the picocli parser Typically called from the
   * SoarCommand's execute method Any output generated by picocli will automatically be passed to
   * the agent's writer Note that while SoarCommands is the typical use case, there was no reason to
   * restrict this to that, so it accepts any object
   *
   * @param agent SoarAgent executing the command
   * @param commandLine An initialized reusable {@code picocli.CommandLine} object to be executed
   *     with the specified args
   * @param args The args as received by a SoarCommand's execute method (i.e., the 0th arg should be
   *     the string for the command itself)
   * @throws SoarException
   */
  public static String parseAndRun(Agent agent, CommandLine commandLine, String[] args)
      throws SoarException {
    PrintWriter pw = agent.getPrinter().asPrintWriter();
    return parseAndRun(commandLine, args, pw);
  }

  /**
   * Executes the specified command and returns the result. A command may be a user object or a
   * pre-initialized {@code picocli.CommandLine} object. For performance-sensitive commands that are
   * invoked often, it is recommended to pass a pre-initialized CommandLine object instead of the
   * user object.
   *
   * @param commandLine An initialized reusable {@code picocli.CommandLine} object to be executed
   *     with the specified args
   * @param args the command line arguments (the first arg will be removed from this list)
   * @param pw the PrintWriter to print any command output to
   * @return the command result
   * @throws SoarException if the user input was invalid or if a runtime exception occurred while
   *     executing the command business logic
   */
  public static String parseAndRun(CommandLine commandLine, String[] args, PrintWriter pw)
      throws SoarException {

    // always treat unrecognized options as params, as there are a number of commands whose params
    // can be preceded by a dash (e.g., srand with a negative number, log with negative numbers,
    // debug time with another command with options, etc.).
    commandLine.setUnmatchedOptionsArePositionalParams(true);

    commandLine.setOut(pw);
    commandLine.setErr(pw);
    ;
    int exitCode =
        commandLine.execute(
            Arrays.copyOfRange(
                args,
                1,
                args.length)); // picocli expects the first arg to be the first arg of the command,
                               // but for SoarCommands its the name of the command, so get the
                               // subarray starting at the second arg
    if (exitCode != 0) throw new SoarException("Error executing command " + String.join(" ", args));
    return Objects.toString(commandLine.getExecutionResult(), "");
  }

  public static String parseAndRun(CommandLine commandLine, String[] args) throws SoarException {
    StringWriter sw = new StringWriter();

    try (PrintWriter pw = new PrintWriter(sw); ) {
      String result = parseAndRun(commandLine, args, pw);
      pw.print(result != null ? result : "");
    } catch (SoarException e) {
      throw new SoarException(sw.toString(), e);
    }
    return sw.toString();
  }
}
